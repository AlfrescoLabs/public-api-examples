apply plugin: 'war'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'jetty'

sourceCompatibility = 1.6
version = '1.0'
group = 'com.myproject'

ext {
	jettyPath = 'alfapi'
	jettyPort = 8090
}

description = """\
A working application that communicates with the Alfresco Public api
------------------------------------------
Project version: ${version}
------------------------------------------
"""

repositories {
    mavenLocal()
    mavenCentral()
    maven {
    	name "Apache Repository"
        url "https://repository.apache.org/content/groups/public"
    }
    maven {
    	name "Alfresco Artifacts Repository"
        url "https://artifacts.alfresco.com/nexus/content/groups/public"
    }
}

dependencies {
	//compile 'org.apache.chemistry.opencmis:chemistry-opencmis-client-impl:0.8.0-SNAPSHOT'
	compile 'org.alfresco.cmis.client:alfresco-opencmis-extension:0.3'
	compile 'org.springframework.social:spring-social-alfresco:0.2.5-RELEASE'
    testCompile 'junit:junit:4.10'
	providedCompile "javax.servlet:servlet-api:2.5"
}

install {
   repositories.mavenInstaller {
        customizePom(pom, project)
    }
}

task mavenPom << {
    def thePom = pom {}
    customizePom(thePom,project)
    thePom.writeTo("pom.xml")
}


def customizePom(pom, gradleProject) {

    pom.whenConfigured { generatedPom ->

    	//Set supported model attributes
        generatedPom.project {
            artifactId = gradleProject.archivesBaseName
            name = gradleProject.archivesBaseName
            url = 'http://www.mycompany.com'
            description = gradleProject.description + "This Pom is auto-generated using 'gradlew mavenPom'"
            organization {
                name = 'My company'
                url = 'http://www.mycompany.com'
            }
            prerequisites {
                maven = "3.0.3"
            }
        }
    }

    //Customize the pom outside of the basic model
    pom.withXml { XmlProvider provider ->

        def builder = new NodeBuilder()
        def repos = builder."repositories" {
        	repositories.findAll{ it.name.endsWith("Repository") }.each { repo ->
        		"repository" {
        			id (repo.name.minus(" "))
        			name(repo.name)
        			url(repo.url)
        		}
        	}
        }

        def build = builder.build {
        	plugins {
        		plugin {
        		  groupId("org.mortbay.jetty")
        		  artifactId("maven-jetty-plugin")
        		  createNode("version","6.1.25")  //fall back to method call because "version" is special
        		  configuration {
        		  	scanIntervalSeconds(10)
        		  	contextPath("$jettyPath")
        		  	connectors (implementation:"org.mortbay.jetty.nio.SelectChannelConnector") {
        		  	 connector {
        		  	 	port("$jettyPort")
        		  	 	maxIdleTime(6000)
        		  	 }
        		  	}
        		  }
        		}
        	}
        }

        provider.asNode().append repos
        provider.asNode().append build
   	}
}

defaultTasks 'tasks'